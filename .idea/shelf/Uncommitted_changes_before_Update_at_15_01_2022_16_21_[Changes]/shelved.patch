Index: department_app/models/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nThis package contains modules with department and employee models:\r\n\r\nModules:\r\n\r\n- `department.py`: defines model representing departments\r\n- `employee.py`: defines model representing employees\r\n\"\"\"\r\nfrom . import department\r\nfrom . import employee
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/department_app/models/__init__.py b/department_app/models/__init__.py
--- a/department_app/models/__init__.py	(revision 670067df56dcc04de23681e69fded80b9a9f1245)
+++ b/department_app/models/__init__.py	(date 1642253543781)
@@ -7,4 +7,4 @@
 - `employee.py`: defines model representing employees
 """
 from . import department
-from . import employee
\ No newline at end of file
+from . import employee
Index: department_app/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n\r\n\r\nfrom flask import Flask\r\nfrom flask_sqlalchemy import SQLAlchemy\r\nfrom flask_migrate import Migrate\r\nfrom flask_restful import Api\r\n\r\nfrom config import Config\r\n\r\napp = Flask(__name__)\r\n# apply configuration\r\napp.config.from_object(Config)\r\ndb = SQLAlchemy(app)\r\n#db.init_app(app)\r\n\r\nmigrate = Migrate(app, db, directory=Config.MIGRATION_DIR)\r\n\r\nfrom department_app.views.index_view import index_bp\r\nfrom department_app.views.department_view import departments_bp\r\nfrom department_app.views.employee_view import employees_bp\r\ndb.create_all()\r\n\r\napp.register_blueprint(index_bp)\r\napp.register_blueprint(employees_bp)\r\napp.register_blueprint(departments_bp)\r\n\r\nfrom department_app.rest import department_api, employee_api\r\n\r\n# api\r\napi = Api(app)\r\n# api for department\r\napi.add_resource(department_api.DepartmentListApi, '/api/departments')\r\napi.add_resource(department_api.DepartmentApi, '/api/departments/<id>')\r\n# api for employee\r\napi.add_resource(employee_api.EmployeeListApi, '/api/employees')\r\napi.add_resource(employee_api.EmployeeApi, '/api/employees/<id>')\r\napi.add_resource(employee_api.EmployeeSearchApi, '/api/employees/search')\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/department_app/__init__.py b/department_app/__init__.py
--- a/department_app/__init__.py	(revision 670067df56dcc04de23681e69fded80b9a9f1245)
+++ b/department_app/__init__.py	(date 1642253543790)
@@ -1,6 +1,3 @@
-
-
-
 from flask import Flask
 from flask_sqlalchemy import SQLAlchemy
 from flask_migrate import Migrate
@@ -12,13 +9,14 @@
 # apply configuration
 app.config.from_object(Config)
 db = SQLAlchemy(app)
-#db.init_app(app)
+
 
 migrate = Migrate(app, db, directory=Config.MIGRATION_DIR)
 
 from department_app.views.index_view import index_bp
 from department_app.views.department_view import departments_bp
 from department_app.views.employee_view import employees_bp
+
 db.create_all()
 
 app.register_blueprint(index_bp)
Index: department_app/tests/test_employee_service.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/department_app/tests/test_employee_service.py b/department_app/tests/test_employee_service.py
new file mode 100644
--- /dev/null	(date 1642250323768)
+++ b/department_app/tests/test_employee_service.py	(date 1642250323768)
@@ -0,0 +1,145 @@
+#: This file consists of tests for employee services
+
+from test_base import BaseTestCase
+from department_app import app
+from department_app.models.department import Department
+from department_app.models.employee import Employee
+from department_app.service.employee_service import EmployeeService
+from datetime import date
+import unittest
+
+
+class TestEmployeeService(BaseTestCase):
+    """
+    class for testing employee service.
+    """
+
+    def test_get_all_employees(self):
+        """
+        test for get employees service
+        """
+        client = app.test_client()
+        department = Department("Test name", "Test organisation")
+        department.save_to_db()
+        employee_1 = Employee('Jack Sparrow', date(1985, 5, 25), 2200, department)
+        employee_1.save_to_db()
+        employee_2 = Employee('Hector Barbossa', date(1956, 7, 12), 2100, department)
+        employee_2.save_to_db()
+        result = EmployeeService.get_employees()
+        self.assertEqual(result, [employee_1, employee_2])
+
+    def test_get_employee_by_id(self):
+        """
+        test for getting employee by id
+        """
+        department = Department("Test name", "Test organisation")
+        department.save_to_db()
+        employee_1 = Employee('Test employee', date(1985, 5, 25), 2200, department)
+        employee_1.save_to_db()  #: id =1
+        result = EmployeeService.get_employee_by_id(1)
+        self.assertEqual(1, result.id)
+        #: check if not department
+        with self.assertRaises(ValueError):
+            EmployeeService.get_employee_by_id(2)
+
+    def test_add_employee(self):
+        """
+        test for add employee service
+        """
+        department = Department("Test name", "Test organisation")
+        department.save_to_db()
+        data = {
+            "birth_date": "12-12-1992",
+            "department": {
+                "name": "Test name",
+                "organisation": "Test organisation"
+            },
+            "name": "Yehor Romaniuk",
+            "salary": 1800
+        }
+        EmployeeService.add_employee(data)
+        self.assertEqual(1, Employee.query.count())
+        #: bad data
+        employee = {
+            "birth_date": "123-12-1992",
+            "department": {
+                "name": "Test name",
+                "organisation": "Test organisation"
+            },
+            "name": "Yehor Romaniuk",
+            "salary": 1800
+        }
+        with self.assertRaises(ValueError):
+            EmployeeService.add_employee(employee)
+        #: NO such department
+        employee = {
+            "birth_date": "12-12-1992",
+            "department": {
+                "name": "NO name",
+                "organisation": "NO organisation"
+            },
+            "name": "Yehor Romaniuk",
+            "salary": 1800
+        }
+        with self.assertRaises(KeyError):
+            EmployeeService.add_employee(employee)
+
+    def test_update_employee(self):
+        """
+        test for updating employee
+        """
+        department = Department("Test name", "Test organisation")
+        department.save_to_db()
+        employee_1 = Employee('Test employee', date(1985, 5, 25), 2200, department)
+        employee_1.save_to_db()  #: id =1
+        new_data = {
+            'name': "New name"
+        }
+        EmployeeService.update_employee(1, new_data)
+        employee = EmployeeService.get_employee_by_id(1)
+        self.assertEqual("New name", employee.name)
+        #: no such employee
+        with self.assertRaises(ValueError):
+            EmployeeService.update_employee(2, new_data)
+
+    def test_delete_employee(self):
+        department = Department("department", "Test organisation")
+        department.save_to_db()
+        employee_1 = Employee('Test employee', date(1985, 5, 25), 2200, department)
+        employee_1.save_to_db()  #: id =1
+        EmployeeService.delete_employee(1)
+        self.assertEqual(0, Employee.query.count())
+        #: bad id
+        with self.assertRaises(ValueError):
+            EmployeeService.delete_employee(1)
+
+    def test_get_employees_with_certain_birth_date(self):
+        """
+        test for searching employee by date of birth
+        """
+        department = Department("New department", "Test organisation")
+        department.save_to_db()
+        employee_1 = Employee('Jack Sparrow', date(1985, 5, 25), 2200, department)
+        employee_1.save_to_db()
+        employee_2 = Employee('Hector Barbossa', date(1956, 7, 12), 2100, department)
+        employee_2.save_to_db()
+        self.assertEqual(EmployeeService.get_employees_with_certain_birth_date(date(1985, 5, 25)), [employee_1])
+
+    def test_get_employees_born_in_period(self):
+        """
+        test for searching by date of birth in period
+        """
+        department = Department("test", "Test organisation")
+        department.save_to_db()
+        employee_1 = Employee('Jack Sparrow', date(1985, 5, 25), 2200, department)
+        employee_1.save_to_db()
+        employee_2 = Employee('Hector Barbossa', date(1956, 7, 12), 2100, department)
+        employee_2.save_to_db()
+        employee_3 = Employee('Davy Jones', date(1971, 7, 10), 2100, department)
+        employee_3.save_to_db()
+        self.assertEqual(EmployeeService.get_employees_born_in_period(date(1956, 5, 2), date(1972, 7, 10)),
+                         [employee_2, employee_3])
+
+
+if __name__ == '__main__':
+    unittest.main()
Index: department_app/tests/test_employee_api.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#: This file consists of tests for employee api\r\nfrom test_base import BaseTestCase\r\nfrom datetime import date\r\nfrom department_app.models.department import Department\r\nfrom department_app.models.employee import Employee\r\nfrom department_app import app\r\nimport json\r\nimport unittest\r\nfrom http import HTTPStatus\r\n\r\nclass TestEmployeeApi(BaseTestCase):\r\n    \"\"\"\r\n    Class for employee API tests\r\n    \"\"\"\r\n\r\n    def test_employee_search_api(self):\r\n        \"\"\"\r\n        test for searching employees in database by date birth or period\r\n        \"\"\"\r\n        client = app.test_client()\r\n        department = Department(\"Test name\", \"Test organisation\")\r\n        department.save_to_db()\r\n        employee_1 = Employee('Jack Sparrow', date(1985, 5, 25), 2200, department)\r\n        employee_1.save_to_db()\r\n        employee_2 = Employee('Hector Barbossa', date(1956, 7, 12), 2100, department)\r\n        employee_2.save_to_db()\r\n        data = {\"date\": \"05-25-1985\"}\r\n        response = client.get('/api/employees/search', data=json.dumps(data), content_type='application/json')\r\n        self.assertEqual([employee_1.json()], response.json)\r\n        period = {\r\n            \"first_date\": \"09-12-1950\",\r\n            \"last_date\": \"12-12-1959\"\r\n        }\r\n        response = client.get('/api/employees/search', data=json.dumps(period), content_type='application/json')\r\n        self.assertEqual([employee_2.json()], response.json)\r\n        #: Bad request.\r\n        data = {\"data\": None}\r\n        response = client.get('/api/employees/search', data=json.dumps(data), content_type='application/json')\r\n        self.assertEqual({\"message\": \"Bad request\"}, response.json)\r\n        self.assertEqual(HTTPStatus.BAD_REQUEST, response.status_code)\r\n\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/department_app/tests/test_employee_api.py b/department_app/tests/test_employee_api.py
--- a/department_app/tests/test_employee_api.py	(revision 670067df56dcc04de23681e69fded80b9a9f1245)
+++ b/department_app/tests/test_employee_api.py	(date 1642247162442)
@@ -8,6 +8,7 @@
 import unittest
 from http import HTTPStatus
 
+
 class TestEmployeeApi(BaseTestCase):
     """
     Class for employee API tests
@@ -39,5 +40,105 @@
         self.assertEqual({"message": "Bad request"}, response.json)
         self.assertEqual(HTTPStatus.BAD_REQUEST, response.status_code)
 
+    def test_get_all_employees(self):
+        """
+        test for get all employees
+        """
+        department_1 = Department('Captains', 'Black Pearl')
+        department_1.save_to_db()
+        employee_1 = Employee('Jack Sparrow', date(1985, 5, 12), 2200, department_1)
+        employee_1.save_to_db()
+        employee_2 = Employee('Hector Barbossa', date(1956, 7, 10), 2100, department_1)
+        employee_2.save_to_db()
+        client = app.test_client()
+        response = client.get("/api/employees")
+        self.assertEqual(response.json, [employee_1.json(), employee_2.json()])
+
+    def test_post_employee(self):
+        """
+        test for posting new employee
+        """
+        department_1 = Department('Captains', 'Black Pearl')
+        department_1.save_to_db()
+        new_data = {
+            "birth_date": "12-12-1992",
+            "department": {
+                "name": "Captains",
+                "organisation": "Black Pearl"
+            },
+            "name": "Yehor Romaniuk",
+            "salary": 1800
+        }
+        client = app.test_client()
+        response = client.post("/api/employees", data=json.dumps(new_data), content_type='application/json')
+        self.assertEqual({'message': 'Employee has been successfully added'}, response.json)
+        #: Bad request.
+        new_data['birth_date'] = "blablabla"
+        response = client.post("/api/employees", data=json.dumps(new_data), content_type='application/json')
+        self.assertEqual({'message': 'Bad request, can`t add employee'}, response.json)
+        #: Not enough information
+        new_data = {
+            "birth_date": "12-12-1992",
+            "name": "Yehor Romaniuk",
+            "salary": 1800
+        }
+        response = client.post("/api/employees", data=json.dumps(new_data), content_type='application/json')
+        self.assertEqual({'message': 'Not enough information'}, response.json)
+
+    def test_get_employee_by_id(self):
+        """
+        test for getting employee by id
+        """
+        department_1 = Department('Engineering', 'Bethesda Softworks')
+        department_1.save_to_db()
+        employee_1 = Employee('Todd Howard', date(1985, 5, 12), 6000, department_1)
+        employee_1.save_to_db()  #: id=1
+        client = app.test_client()
+        response = client.get("/api/employees/1", )
+        self.assertEqual(employee_1.json(), response.json)
+        #: Bad request
+        response = client.get("/api/employees/2", )
+        self.assertEqual({'message': f"Couldn`t find employee by id='2'"}, response.json)
+
+    def test_put_employee(self):
+        """
+        test for replace employee with new data
+        """
+        department_1 = Department('Engineering', 'Bethesda Softworks')
+        department_1.save_to_db()
+        employee_1 = Employee('Todd Howard', date(1985, 5, 12), 6000, department_1)
+        employee_1.save_to_db()
+        new_data = {
+            'name': "Ashley Cheng Craig Lafferty"
+        }
+        client = app.test_client()
+        response = client.put("/api/employees/1", data=json.dumps(new_data), content_type='application/json')
+        self.assertEqual({"message": 'Employee has been successfully updated'}, response.json)
+        #: Empty request
+        response = client.put("/api/employees/1", data=json.dumps(None), content_type='application/json')
+        self.assertEqual({'message': 'Empty request'}, response.json)
+        #: Bad Request
+        new_data = {
+            'surname': "Ashley Cheng Craig Lafferty"
+        }
+        response = client.put("/api/employees/1", data=json.dumps(new_data), content_type='application/json')
+        self.assertEqual({'message': 'Bad request'}, response.json)
+
+    def test_delete_employee(self):
+        department_1 = Department('Engineering', 'Bethesda Softworks')
+        department_1.save_to_db()
+        employee_1 = Employee('Todd Howard', date(1985, 5, 12), 6000, department_1)
+        employee_1.save_to_db()
+        client = app.test_client()
+        response = client.delete("/api/employees/1")
+        self.assertEqual(response.status_code, HTTPStatus.OK)
+        self.assertEqual(response.json, {"message": "Employee has been deleted"})
+
+        #: Call error
+        response = client.delete("/api/employees/3")
+        self.assertEqual(response.status_code, HTTPStatus.NOT_FOUND)
+        self.assertEqual(response.json, {'message': 'Cannot delete employee'})
+
+
 if __name__ == '__main__':
     unittest.main()
Index: department_app/tests/test_employee_view.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/department_app/tests/test_employee_view.py b/department_app/tests/test_employee_view.py
new file mode 100644
--- /dev/null	(date 1642251649441)
+++ b/department_app/tests/test_employee_view.py	(date 1642251649441)
@@ -0,0 +1,51 @@
+#: file contains tests for employee views
+
+from test_base import BaseTestCase
+from department_app import app
+from http import HTTPStatus
+from department_app.models.department import Department
+from department_app.models.employee import Employee
+from datetime import date
+import unittest
+
+
+class TestEmployeeView(BaseTestCase):
+    """
+    class with tests for employee views
+    """
+
+    def test_employees_page(self):
+        """
+        test for employees page
+        """
+        client = app.test_client()
+        response = client.get("/employees/")
+        self.assertEqual(response.status_code, HTTPStatus.OK)
+
+    def test_employee_page(self):
+        """
+        test for employee page
+        """
+        client = app.test_client()
+        response = client.get("/employee/")
+        self.assertEqual(response.status_code, HTTPStatus.OK)
+
+    def test_update_employee_page(self):
+        """
+        test for update employee page
+        """
+        department_1 = Department('Captains', 'Black Pearl')
+        department_1.save_to_db()
+        employee_1 = Employee('Jack Sparrow', date(1985, 5, 12), 2200, department_1)
+        employee_1.save_to_db()
+        client = app.test_client()
+        response = client.get("/employees/1/update")
+        self.assertEqual(response.status_code, HTTPStatus.OK)
+
+    def test_delete_employee_page(self):
+        """
+        test for deleting employees page
+        """
+        client = app.test_client()
+        response = client.get("/employees/1/delete")
+        self.assertEqual(response.status_code, HTTPStatus.OK)
Index: department_app/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n# Created by https://www.toptal.com/developers/gitignore/api/flask\r\n# Edit at https://www.toptal.com/developers/gitignore?templates=flask\r\n\r\n### Flask ###\r\ninstance/*\r\n!instance/.gitignore\r\n.webassets-cache\r\n.env\r\n\r\n### Flask.Python Stack ###\r\n# Byte-compiled / optimized / DLL files\r\n__pycache__/\r\n*.py[cod]\r\n*$py.class\r\n\r\n# C extensions\r\n*.so\r\n\r\n# Distribution / packaging\r\n.Python\r\nbuild/\r\ndevelop-eggs/\r\ndist/\r\ndownloads/\r\neggs/\r\n.eggs/\r\nlib/\r\nlib64/\r\nparts/\r\nsdist/\r\nvar/\r\nwheels/\r\nshare/python-wheels/\r\n*.egg-info/\r\n.installed.cfg\r\n*.egg\r\nMANIFEST\r\n\r\n# PyInstaller\r\n#  Usually these files are written by a python script from a template\r\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\r\n*.manifest\r\n*.spec\r\n\r\n# Installer logs\r\npip-log.txt\r\npip-delete-this-directory.txt\r\n\r\n# Unit test / coverage reports\r\nhtmlcov/\r\n.tox/\r\n.nox/\r\n.coverage\r\n.coverage.*\r\n.cache\r\nnosetests.xml\r\ncoverage.xml\r\n*.cover\r\n*.py,cover\r\n.hypothesis/\r\n.pytest_cache/\r\ncover/\r\n\r\n# Translations\r\n*.mo\r\n*.pot\r\n\r\n# Django stuff:\r\n*.log\r\nlocal_settings.py\r\ndb.sqlite3\r\ndb.sqlite3-journal\r\n\r\n# Flask stuff:\r\ninstance/\r\n\r\n# Scrapy stuff:\r\n.scrapy\r\n\r\n# Sphinx documentation\r\ndocs/_build/\r\n\r\n# PyBuilder\r\n.pybuilder/\r\ntarget/\r\n\r\n# Jupyter Notebook\r\n.ipynb_checkpoints\r\n\r\n# IPython\r\nprofile_default/\r\nipython_config.py\r\n\r\n# pyenv\r\n#   For a library or package, you might want to ignore these files since the code is\r\n#   intended to run in multiple environments; otherwise, check them in:\r\n# .python-version\r\n\r\n# pipenv\r\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\r\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\r\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\r\n#   install all needed dependencies.\r\n#Pipfile.lock\r\n\r\n# poetry\r\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\r\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\r\n#   commonly ignored for libraries.\r\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\r\n#poetry.lock\r\n\r\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\r\n__pypackages__/\r\n\r\n# Celery stuff\r\ncelerybeat-schedule\r\ncelerybeat.pid\r\n\r\n# SageMath parsed files\r\n*.sage.py\r\n\r\n# Environments\r\n.venv\r\nenv/\r\nvenv/\r\nENV/\r\nenv.bak/\r\nvenv.bak/\r\n\r\n# Spyder project settings\r\n.spyderproject\r\n.spyproject\r\n\r\n# Rope project settings\r\n.ropeproject\r\n\r\n# mkdocs documentation\r\n/site\r\n\r\n# mypy\r\n.mypy_cache/\r\n.dmypy.json\r\ndmypy.json\r\n\r\n# Pyre type checker\r\n.pyre/\r\n\r\n# pytype static type analyzer\r\n.pytype/\r\n\r\n# Cython debug symbols\r\ncython_debug/\r\n\r\n# PyCharm\r\n#  JetBrains specific template is maintainted in a separate JetBrains.gitignore that can\r\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\r\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\r\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\r\n#.idea/\r\n\r\n# End of https://www.toptal.com/developers/gitignore/api/flask\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/department_app/.gitignore b/department_app/.gitignore
--- a/department_app/.gitignore	(revision 670067df56dcc04de23681e69fded80b9a9f1245)
+++ b/department_app/.gitignore	(date 1642234986370)
@@ -158,6 +158,6 @@
 #  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
 #  and can be added to the global gitignore or merged into this file.  For a more nuclear
 #  option (not recommended) you can uncomment the following to ignore the entire idea folder.
-#.idea/
+.idea/
 
 # End of https://www.toptal.com/developers/gitignore/api/flask
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># final_project_python_epam\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision 670067df56dcc04de23681e69fded80b9a9f1245)
+++ b/README.md	(date 1642256489172)
@@ -1,1 +1,115 @@
-# final_project_python_epam
+![GitHub Dark](https://github.com/github-dark.png#gh-light-mode-only)
+
+# Department App
+
+***
+Department App is web application for managing departments and employees within organisations. It uses RESTful web
+service to perform CRUD operations. The user is allowed to:
+
+***
+
+## How to start
+
+__Project uses python v.3.9__
+
+***
+
+## How to deploy
+
+### Clone the _repo_:
+
+> `git clone https://github.com/krasheg/final_project_python_epam`
+
+### Create the virtual environment in project and activate it:
+
+> `cd epam_winter2021_project-main`
+
+> `python -m venv env`
+
+> `source venv/bin/activate` On linux
+
+> `cd venv/Scripts/activate` On Windows
+
+### How to install project packages:
+
+> `pip install -r requirements.txt`
+
+### How to run the migration scripts to create database schema:
+
+> `flask db init` - further use is optional, in case of intentional reinstallation
+
+> `flask db migrate`
+
+> `flask db update`
+***
+
+##### After these steps you can see the index page of the application:
+
+`localhost:5000/`
+
+or
+
+`localhost:5000/index`
+
+***
+
+# API operations
+
+> `localhost:5000/api/departments`
+
+* GET - show all departments
+
+* POST - add new department with data:
+
+`{'name': 'department name', 'organisation': 'department organisation'}`
+
+
+> `localhost:5000/api/department/<id>`
+
+* GET - show department by id
+* PUT - update department by given data:
+
+  `{'name': 'Department name' }`
+  or
+  `{'organisation': 'Department organisation' }`
+* DELETE - delete department by given id
+
+> `localhost:5000/api/employees`
+
+* GET - show all employees
+* POST - add new employee with given data:
+  `{
+  "birth_date": "MM-DD-YYY", "department": {
+  "name": " Department name",
+  "organisation": "Department organisation"
+  },
+  "name": "Employee name",
+  "salary": int(salary)
+  }`
+
+> `localhost:5000/api/employee/<id>`
+
+* GET - show employee by id
+* PUT - update employee by id with data:
+  `{
+  "birth_date": "MM-DD-YYY", "department": {
+  "name": " Department name",
+  "organisation": "Department organisation"
+  },
+  "name": "Employee name",
+  "salary": int(salary)
+  }` (one of the field is required)
+
+> `localhost:5000/api/employees/search`
+
+* GET - show employees by birth date if `{
+  "date": "MM-DD-YYY"
+  }` or show employees born in period if `{
+  "first_date": "MM-DD-YYY",
+  "last_date": "MM-DD-YYY"
+  }`
+
+
+
+
+
Index: department_app/service/department_service.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nDepartment service used to make database queries, this module defines the\r\nfollowing classes:\r\n\r\n- `DepartmentService`, department service\r\n\"\"\"\r\n\r\nfrom department_app import db\r\nfrom department_app.models.department import Department\r\n\r\n\r\nclass DepartmentService:\r\n    \"\"\"\r\n    Department service used to make database queries\r\n    \"\"\"\r\n\r\n    @classmethod\r\n    def get_all_departments(cls):\r\n        \"\"\"\r\n        try to return all departments from database, if not- return an error\r\n\r\n        :return: all departments\r\n        \"\"\"\r\n        try:\r\n\r\n            return db.session.query(Department).all()\r\n        except:\r\n            raise ValueError('An error occurred while returning all departments')\r\n\r\n    @staticmethod\r\n    def get_department_by_id(department_id):\r\n        \"\"\"\r\n        method return the department with given id\r\n\r\n        :param department_id: id of the searched department\r\n        :return: department with id == department_id\r\n        \"\"\"\r\n        department = db.session.query(Department).filter_by(id=department_id).first()\r\n        if not department:\r\n            raise ValueError('No department with id ' + str(department_id))\r\n        return department\r\n\r\n    @staticmethod\r\n    def get_department_by_name_and_organization(name, organisation):\r\n        \"\"\"\r\n        method return the department with given name and organisation\r\n\r\n        :param name: name of the searched department\r\n        :param organisation: organisation in which the department is\r\n        :return: department with the same name and organisation like in params\r\n        \"\"\"\r\n        try:\r\n            result = db.session.query(Department).filter_by(name=name, organisation=organisation).first()\r\n            if not result:\r\n                raise ValueError\r\n            return result\r\n        except Exception:\r\n            raise ValueError(\"Department does not exist\")\r\n\r\n    @staticmethod\r\n    def add_department(department_json):\r\n        \"\"\"\r\n        method that adds a new department to the database\r\n        :param department_json: json with department name and organisation\r\n        :return: department\r\n        \"\"\"\r\n        try:\r\n            department = Department(department_json['name'], department_json['organisation'])\r\n            department.save_to_db()\r\n        except KeyError:\r\n            raise ValueError(f\"Can not add department\")\r\n        return department\r\n\r\n    @classmethod\r\n    def update_department(cls, department_id, department_json):\r\n        \"\"\"\r\n        returns updated department\r\n        :param department_id: department`s id, which we will update\r\n        :param department_json: json data for update\r\n        :return: updated department\r\n        \"\"\"\r\n        department = cls.get_department_by_id(department_id)\r\n        if not department:\r\n            raise ValueError('Invalid department id')\r\n        if department_json.get('name'):\r\n            department.name = department_json['name']\r\n        if department_json.get('organisation'):\r\n            department.organisation = department_json['organisation']\r\n        department.save_to_db()\r\n        return department\r\n\r\n    @classmethod\r\n    def delete_department(cls, department_id):\r\n        \"\"\"\r\n        delete department from department database by his id\r\n        :param department_id: id of department to delete\r\n        :return: None\r\n        \"\"\"\r\n        department = cls.get_department_by_id(department_id)\r\n        if not department:\r\n            raise ValueError('Cannot delete department')\r\n        db.session.delete(department)\r\n        db.session.commit()\r\n\r\n    @staticmethod\r\n    def calc_avg_salary(departments):\r\n        \"\"\"\r\n        function that calculates the average salary for each department, save it in database  and returns it\r\n\r\n        \"\"\"\r\n        for department in departments:\r\n            if department.employees:\r\n                try:\r\n                    department.average_salary = int((sum([employee.salary for employee in department.employees])) / len(\r\n                        department.employees))\r\n                except Exception:\r\n                    raise ValueError(\"Employee`s salary cannot be zero\")\r\n                department.save_to_db()\r\n        return departments\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/department_app/service/department_service.py b/department_app/service/department_service.py
--- a/department_app/service/department_service.py	(revision 670067df56dcc04de23681e69fded80b9a9f1245)
+++ b/department_app/service/department_service.py	(date 1642246319530)
@@ -106,7 +106,6 @@
     def calc_avg_salary(departments):
         """
         function that calculates the average salary for each department, save it in database  and returns it
-
         """
         for department in departments:
             if department.employees:
Index: department_app/tests/test_index_view.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/department_app/tests/test_index_view.py b/department_app/tests/test_index_view.py
new file mode 100644
--- /dev/null	(date 1642251845636)
+++ b/department_app/tests/test_index_view.py	(date 1642251845636)
@@ -0,0 +1,22 @@
+#: File contains tests for homepage view
+import http
+
+from department_app import app
+from test_base import BaseTestCase
+from http import HTTPStatus
+
+
+class TestIndexView(BaseTestCase):
+    """
+    Class for homepage view tests
+    """
+
+    def test_index(self):
+        """
+        test for homepage view
+        """
+        client = app.test_client()
+        response_1 = client.get('/')
+        response_2 = client.get('/index')
+        self.assertEqual(response_1.status_code, HTTPStatus.OK)
+        self.assertEqual(response_2.status_code, HTTPStatus.OK)
Index: department_app/service/employee_service.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nEmployee service used to make database queries, this module defines the\r\nfollowing classes:\r\n\r\n- `EmployeeService`, employee service\r\n\"\"\"\r\nfrom department_app import db\r\nfrom department_app.models.employee import Employee\r\nfrom department_app.service.department_service import DepartmentService\r\nfrom sqlalchemy import and_\r\nfrom datetime import datetime\r\nimport json\r\n\r\n\r\nclass EmployeeService:\r\n    \"\"\"\r\n    Employee service used to make database queries from employee table\r\n    \"\"\"\r\n\r\n    @classmethod\r\n    def get_employees(cls):\r\n        \"\"\"\r\n        method return all employees from db\r\n        :return: list of all employees\r\n        \"\"\"\r\n        try:\r\n            return db.session.query(Employee).all()\r\n        except:\r\n            return {\"message\": \"Error while fetching employees\"}\r\n\r\n    @staticmethod\r\n    def get_employee_by_id(employee_id):\r\n        \"\"\"\r\n        method return employee with given id\r\n        :param employee_id: id of employee\r\n        :return: employee with given id\r\n        \"\"\"\r\n        try:\r\n            return db.session.query(Employee).filter_by(id=employee_id).first()\r\n        except:\r\n            raise ValueError(\"No such employee in database\")\r\n\r\n    @staticmethod\r\n    def add_employee(employee_json):\r\n        \"\"\"\r\n        add a new employee to database\r\n        :return: employee in json\r\n        \"\"\"\r\n        try:\r\n            name = employee_json['name']\r\n            birth_date = datetime.strptime(employee_json['birth_date'], '%m-%d-%Y')\r\n            salary = employee_json['salary']\r\n            department_name = employee_json['department']['name']\r\n            department_organisation = employee_json['department']['organisation']\r\n        except:\r\n            raise ValueError(\"Incorrect data\")\r\n        try:\r\n            department = DepartmentService.get_department_by_name_and_organization(department_name,\r\n                                                                                   department_organisation)\r\n        except ValueError:\r\n            raise KeyError(\"No such department\")\r\n\r\n        employee = Employee(name, birth_date, salary, department)\r\n        employee.save_to_db()\r\n        return employee.json()\r\n\r\n    @classmethod\r\n    def update_employee(cls, id, employee_json):\r\n        \"\"\"\r\n        Updates employee data from json and his id\r\n        :param id: id of employee for update\r\n        :param employee_json: data for update\r\n        :return: updated employee\r\n        \"\"\"\r\n        employee = cls.get_employee_by_id(id)\r\n        data = employee_json\r\n\r\n        if not employee:\r\n            raise ValueError(f\"Could not find employee by {id=}\")\r\n        if data.get('name'):\r\n            employee.name = data['name']\r\n        if data.get('birth_date'):\r\n            employee.birth_date = datetime.strptime(data['birth_date'], '%m-%d-%Y')\r\n        if data.get('salary'):\r\n            employee.salary = int(data['salary'])\r\n        if data.get('department'):\r\n            department = DepartmentService.get_department_by_name_and_organization(data['department']['name'],\r\n                                                                                   data['department']['organisation'])\r\n            employee.department = department\r\n        try:\r\n\r\n            employee.save_to_db()\r\n            return employee\r\n        except ValueError:\r\n            return {'message': 'An error occurred while saving employee'}\r\n\r\n    @classmethod\r\n    def delete_employee(cls, id):\r\n        \"\"\"\r\n        delete employee from database by his id\r\n        :param id: employee id\r\n        \"\"\"\r\n        employee = cls.get_employee_by_id(id)\r\n        if not employee:\r\n            raise ValueError(\"Could not find employee\")\r\n        db.session.delete(employee)\r\n        db.session.commit()\r\n\r\n    @classmethod\r\n    def get_employees_with_certain_birth_date(cls, birth_date):\r\n        \"\"\"\r\n        return employees with certain birthdate\r\n\r\n        :param birth_date: date of birth\r\n        :return:employees that born on given date\r\n        \"\"\"\r\n        employees = db.session.query(Employee).filter_by(birth_date=birth_date).all()\r\n\r\n        return employees\r\n\r\n    @staticmethod\r\n    def get_employees_born_in_period(first_date, last_date):\r\n        \"\"\"\r\n        Fetches employees born in given period from database\r\n        :param first_date: date to fetch employees born after\r\n        :param last_date: date to fetch employees born before\r\n        :return: employees that born on given period\r\n        \"\"\"\r\n        employees = db.session.query(Employee).filter(\r\n            and_(\r\n                Employee.birth_date >= first_date,\r\n                Employee.birth_date < last_date\r\n            )\r\n        ).all()\r\n        return employees\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/department_app/service/employee_service.py b/department_app/service/employee_service.py
--- a/department_app/service/employee_service.py	(revision 670067df56dcc04de23681e69fded80b9a9f1245)
+++ b/department_app/service/employee_service.py	(date 1642249177997)
@@ -35,10 +35,10 @@
         :param employee_id: id of employee
         :return: employee with given id
         """
-        try:
-            return db.session.query(Employee).filter_by(id=employee_id).first()
-        except:
+        employee = db.session.query(Employee).filter_by(id=employee_id).first()
+        if not employee:
             raise ValueError("No such employee in database")
+        return employee
 
     @staticmethod
     def add_employee(employee_json):
@@ -52,7 +52,7 @@
             salary = employee_json['salary']
             department_name = employee_json['department']['name']
             department_organisation = employee_json['department']['organisation']
-        except:
+        except ValueError:
             raise ValueError("Incorrect data")
         try:
             department = DepartmentService.get_department_by_name_and_organization(department_name,
@@ -76,19 +76,20 @@
         data = employee_json
 
         if not employee:
-            raise ValueError(f"Could not find employee by {id=}")
-        if data.get('name'):
+            raise KeyError(f"Could not find employee by {id=}")
+        elif data.get('name'):
             employee.name = data['name']
-        if data.get('birth_date'):
+        elif data.get('birth_date'):
             employee.birth_date = datetime.strptime(data['birth_date'], '%m-%d-%Y')
-        if data.get('salary'):
+        elif data.get('salary'):
             employee.salary = int(data['salary'])
-        if data.get('department'):
+        elif data.get('department'):
             department = DepartmentService.get_department_by_name_and_organization(data['department']['name'],
                                                                                    data['department']['organisation'])
             employee.department = department
+        else:
+            raise ValueError
         try:
-
             employee.save_to_db()
             return employee
         except ValueError:
Index: department_app/rest/employee_api.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nREST operations for working with employees\r\n\"\"\"\r\nfrom flask import jsonify, request\r\nfrom flask_restful import Resource\r\nfrom datetime import datetime\r\n\r\nfrom department_app.service.employee_service import EmployeeService\r\n\r\n\r\ndef get_date_or_none(date_str, date_format='%m-%d-%Y'):\r\n    \"\"\"\r\n    Returns date represented by date string and date format or None if date\r\n    string has wrong type/doesn't match the format specified\r\n\r\n    \"\"\"\r\n    try:\r\n        return datetime.strptime(date_str, date_format).date()\r\n    except (ValueError, TypeError):\r\n        return None\r\n\r\n\r\nclass EmployeeSearchApi(Resource):\r\n    \"\"\"\r\n    Class for searching employee by date of birth or by date period\r\n    \"\"\"\r\n\r\n    @staticmethod\r\n    def get():\r\n        \"\"\"\r\n\r\n        finding employees by date of birth\r\n        returns a list of employees in json\r\n        \"\"\"\r\n        args = request.json\r\n        date = get_date_or_none(args.get('date'))\r\n        first_date = get_date_or_none(args.get('first_date'))\r\n        last_date = get_date_or_none(args.get('last_date'))\r\n        if date:\r\n            employees = EmployeeService.get_employees_with_certain_birth_date(date)\r\n            return jsonify([employee.json() for employee in employees])\r\n        elif first_date and last_date:\r\n            employees = EmployeeService.get_employees_born_in_period(first_date, last_date)\r\n            return jsonify([employee.json() for employee in employees])\r\n        else:\r\n            return {\"message\": \"Bad request\"}, 400\r\n\r\n\r\nclass EmployeeListApi(Resource):\r\n    \"\"\"\r\n    Class for defining employees list get/put requests\r\n\r\n    \"\"\"\r\n\r\n    @staticmethod\r\n    def get():\r\n        \"\"\"\r\n        return  all employees in json format\r\n        \"\"\"\r\n        return jsonify([employee.json() for employee in EmployeeService.get_employees()])\r\n\r\n    @staticmethod\r\n    def post():\r\n        '''\r\n        Add a new employee with request data\r\n\r\n        return information about result\r\n\r\n        '''\r\n        employee_json = request.json\r\n        if not employee_json:\r\n            return {'message': 'Empty request'}, 400\r\n\r\n        elif not employee_json.get('name') or not employee_json.get('birth_date') or not employee_json.get('salary') or not \\\r\n                employee_json.get('department'):\r\n            return {'message': 'Not enough information'}, 400\r\n\r\n        try:\r\n            EmployeeService.add_employee(employee_json)\r\n        except ValueError:\r\n            return {'message': 'Bad request, can`t add employee'}, 400\r\n        return {'message': 'Employee has been successfully added'}, 201\r\n\r\n\r\nclass EmployeeApi(Resource):\r\n    \"\"\"\r\n    Class defines get/put/update/delete methods for Employee\r\n\r\n    \"\"\"\r\n\r\n    @staticmethod\r\n    def get(id):\r\n        \"\"\"\r\n\r\n        return the employee with a given id in json format\r\n\r\n        \"\"\"\r\n        try:\r\n            return jsonify(EmployeeService.get_employee_by_id(id).json())\r\n        except:\r\n            return {'message': f'Couldn`t find employee by {id=}'}, 404\r\n\r\n    @staticmethod\r\n    def put(id):\r\n        \"\"\"\r\n        update the employee with a given id\r\n        return: message with result\r\n        \"\"\"\r\n        employee_json = request.json\r\n        if not employee_json:\r\n            return {'message': 'Empty request'}, 400\r\n        try:\r\n            EmployeeService.update_employee(id, employee_json)\r\n        except ValueError:\r\n            return {'message': 'Bad request'}, 400\r\n        return {\"message\": 'Employee has been successfully updated'}, 200\r\n\r\n    @staticmethod\r\n    def delete(id):\r\n        \"\"\"\r\n        Delete employee by his id\r\n        return result\r\n        \"\"\"\r\n        try:\r\n            EmployeeService.delete_employee(id)\r\n            return {\"message\": \"Employee has been deleted\"}, 200\r\n        except ValueError:\r\n            return {'message': 'Cannot delete employee'}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/department_app/rest/employee_api.py b/department_app/rest/employee_api.py
--- a/department_app/rest/employee_api.py	(revision 670067df56dcc04de23681e69fded80b9a9f1245)
+++ b/department_app/rest/employee_api.py	(date 1642247149464)
@@ -125,5 +125,5 @@
             EmployeeService.delete_employee(id)
             return {"message": "Employee has been deleted"}, 200
         except ValueError:
-            return {'message': 'Cannot delete employee'}
+            return {'message': 'Cannot delete employee'}, 404
 
Index: department_app/tests/test_department_service.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#: file contains tests for departments services\r\n\r\nfrom test_base import BaseTestCase\r\nfrom department_app.models.department import Department\r\nfrom department_app.models.employee import Employee\r\nfrom department_app.service.department_service import DepartmentService\r\nfrom datetime import date\r\nimport unittest\r\n\r\n\r\nclass TestDepartmentService(BaseTestCase):\r\n    \"\"\"\r\n    class for department services tests\r\n    \"\"\"\r\n    def test_get_all_departments(self):\r\n        \"\"\"\r\n        test for service get_all_departments\r\n        \"\"\"\r\n        department_1 = Department(\"Security\", \"Ajax\")\r\n        department_2 = Department(\"Oil and gas engineering\", \"Ukrtransgas\")\r\n        department_1.save_to_db()\r\n        department_2.save_to_db()\r\n        result = DepartmentService.get_all_departments()\r\n        self.assertEqual(result, [department_1, department_2])\r\n\r\n    def test_get_department_by_id(self):\r\n        \"\"\"\r\n        test for service get_department_by_id\r\n        \"\"\"\r\n        department_1 = Department(\"Security\", \"Ajax\")\r\n        department_1.save_to_db()  #: id == 1\r\n        result = DepartmentService.get_department_by_id(1)\r\n        self.assertEqual(1, result.id)\r\n        #: check if not department\r\n        with self.assertRaises(ValueError):\r\n            DepartmentService.get_department_by_id(2)\r\n\r\n    def test_get_department_by_name_and_organization(self):\r\n        \"\"\"\r\n             test for service get_department_by_name_and_organization\r\n             \"\"\"\r\n        department = Department(\"Test name\", \"Test Organization\")\r\n        department.save_to_db()\r\n        self.assertEqual(\r\n            DepartmentService.get_department_by_name_and_organization(department.name, department.organisation),\r\n            department)\r\n        #: check if wrong database\r\n        with self.assertRaises(ValueError):\r\n            DepartmentService.get_department_by_name_and_organization(\"Wrong name\", department.organisation)\r\n\r\n    def test_add_department(self):\r\n        \"\"\"\r\n        test for service add_department\r\n        \"\"\"\r\n        department = {\r\n            'name': \"Test Name\",\r\n            'organisation': \"Test Organization\"\r\n        }\r\n        DepartmentService.add_department(department)\r\n        self.assertEqual(1, Department.query.count())\r\n        # bad data\r\n        department = {\r\n            'anme': \"Test Name\",\r\n            'organisation': \"Test Organization\"\r\n        }\r\n        with self.assertRaises(ValueError):\r\n            DepartmentService.add_department(department)\r\n\r\n    def test_update_department(self):\r\n        \"\"\"\r\n        test for service update_department\r\n        \"\"\"\r\n        department = Department(\"Test Name\", \"Test Organization\")\r\n        department.save_to_db()\r\n        update_data = {\"name\": \"New Name\"}\r\n        DepartmentService.update_department(1, update_data)\r\n        self.assertTrue(\"New Name\", \"Test Organization\")\r\n        #: Bad data\r\n        with self.assertRaises(ValueError):\r\n            DepartmentService.update_department(2, update_data)\r\n\r\n    def test_delete_department(self):\r\n        \"\"\"\r\n        test for service delete_department\r\n        \"\"\"\r\n        department = Department(\"Test Name\", \"Test Organization\")\r\n        department.save_to_db()\r\n        self.assertEqual(1, Department.query.count())\r\n        DepartmentService.delete_department(1)\r\n        self.assertEqual(0, Department.query.count())\r\n        # Bad data\r\n        with self.assertRaises(ValueError):\r\n            DepartmentService.delete_department(1)\r\n\r\n    def test_calculate_average_salary(self):\r\n        \"\"\"\r\n        test for service calculate_average_salary\r\n        \"\"\"\r\n        department = Department(\"Test Department\", \"Test Organisation\")\r\n        employee_1 = Employee('Employee 1', date(1985, 5, 12), 5000, department)\r\n        employee_2 = Employee('Employee 2', date(1977, 7, 12), 1000, department)\r\n        department.save_to_db()\r\n        employee_1.save_to_db()\r\n        employee_2.save_to_db()\r\n        DepartmentService.calc_avg_salary(DepartmentService.get_all_departments())\r\n        self.assertEqual(3000, DepartmentService.get_department_by_id(1).average_salary)\r\n        #: Bad data (employees salary)\r\n        employee_3 = Employee('Employee 3', date(1977, 7, 12), \"skhdv\", department)\r\n        employee_3.save_to_db()\r\n        with self.assertRaises(ValueError):\r\n            DepartmentService.calc_avg_salary(DepartmentService.get_all_departments())\r\n\r\n\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/department_app/tests/test_department_service.py b/department_app/tests/test_department_service.py
--- a/department_app/tests/test_department_service.py	(revision 670067df56dcc04de23681e69fded80b9a9f1245)
+++ b/department_app/tests/test_department_service.py	(date 1642249042413)
@@ -74,7 +74,9 @@
         department.save_to_db()
         update_data = {"name": "New Name"}
         DepartmentService.update_department(1, update_data)
-        self.assertTrue("New Name", "Test Organization")
+        department = DepartmentService.get_department_by_id(1)
+        self.assertTrue("New Name", department.name)
+
         #: Bad data
         with self.assertRaises(ValueError):
             DepartmentService.update_department(2, update_data)
